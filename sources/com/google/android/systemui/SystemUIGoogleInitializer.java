package com.google.android.systemui;

import android.content.Context;
import android.os.Handler;
import android.os.HandlerThread;
import android.util.ArrayMap;
import android.util.Log;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.logging.UiEventLogger;
import com.android.keyguard.KeyguardUpdateMonitor;
import com.android.systemui.Dependency;
import com.android.systemui.Dependency$$ExternalSyntheticLambda0;
import com.android.systemui.SystemUIInitializer$1;
import com.android.systemui.SystemUIInitializer$2;
import com.android.systemui.SystemUIInitializer$3;
import com.android.systemui.UiOffloadThread;
import com.android.systemui.animation.DialogTransitionAnimator;
import com.android.systemui.broadcast.BroadcastDispatcher;
import com.android.systemui.dagger.AndroidInternalsModule;
import com.android.systemui.dagger.FrameworkServicesModule;
import com.android.systemui.dagger.GlobalModule;
import com.android.systemui.dagger.SharedLibraryModule;
import com.android.systemui.flags.FeatureFlags;
import com.android.systemui.fragments.FragmentService;
import com.android.systemui.mediaprojection.devicepolicy.MediaProjectionDevicePolicyModule;
import com.android.systemui.model.SysUiState;
import com.android.systemui.navigationbar.NavigationBarControllerImpl;
import com.android.systemui.navigationbar.NavigationModeController;
import com.android.systemui.plugins.DarkIconDispatcher;
import com.android.systemui.plugins.PluginManager;
import com.android.systemui.plugins.VolumeDialogController;
import com.android.systemui.plugins.statusbar.StatusBarStateController;
import com.android.systemui.recents.OverviewProxyService;
import com.android.systemui.settings.UserTracker;
import com.android.systemui.statusbar.CommandQueue;
import com.android.systemui.statusbar.NotificationMediaManager;
import com.android.systemui.statusbar.notification.collection.render.GroupExpansionManagerImpl;
import com.android.systemui.statusbar.notification.collection.render.GroupMembershipManagerImpl;
import com.android.systemui.statusbar.notification.stack.AmbientState;
import com.android.systemui.statusbar.notification.stack.NotificationSectionsManager;
import com.android.systemui.statusbar.phone.LightBarController;
import com.android.systemui.statusbar.phone.ScreenOffAnimationController;
import com.android.systemui.statusbar.phone.SystemUIDialogManager;
import com.android.systemui.statusbar.policy.BluetoothControllerImpl;
import com.android.systemui.statusbar.policy.DeviceProvisionedController;
import com.android.systemui.statusbar.window.StatusBarWindowControllerImpl;
import com.android.systemui.tuner.TunerService;
import com.android.systemui.unfold.FoldStateProviderModule;
import com.android.systemui.unfold.HingeAngleProviderInternalModule;
import com.android.systemui.unfold.SysUIUnfoldModule;
import com.android.systemui.unfold.UnfoldRotationProviderInternalModule;
import com.android.systemui.unfold.UnfoldSharedInternalModule;
import com.android.systemui.unfold.UnfoldSharedModule;
import com.android.systemui.unfold.UnfoldTransitionModule;
import com.android.systemui.util.InitializationChecker;
import com.android.systemui.util.kotlin.GlobalCoroutinesModule;
import com.android.systemui.util.kotlin.SysUICoroutinesModule;
import com.android.systemui.util.leak.LeakModule;
import com.android.wm.shell.R;
import com.android.wm.shell.dagger.WMShellCoroutinesModule;
import com.android.wm.shell.keyguard.KeyguardTransitions;
import com.android.wm.shell.shared.ShellTransitions;
import com.android.wm.shell.sysui.ShellInterface;
import com.google.android.systemui.SystemUIGoogleInitializer;
import com.google.android.systemui.assist.AssistManagerGoogle;
import com.google.android.systemui.dagger.DaggerSysUIGoogleGlobalRootComponent$SysUIGoogleGlobalRootComponentImpl;
import com.google.android.systemui.dagger.DaggerSysUIGoogleGlobalRootComponent$SysUIGoogleSysUIComponentImpl;
import com.google.android.systemui.dagger.DaggerSysUIGoogleGlobalRootComponent$WMComponentBuilder;
import com.google.android.systemui.dagger.DaggerSysUIGoogleGlobalRootComponent$WMComponentImpl;
import com.google.android.systemui.keyguard.ui.composable.blueprint.GoogleDefaultBlueprintModule;
import dagger.Lazy;
import java.util.Objects;
import java.util.Optional;

/* compiled from: go/retraceme 97024faaf470985feb378c0f604e66d2eca678dbbb151206fad2ab4525fd6f86 */
/* loaded from: classes2.dex */
public final class SystemUIGoogleInitializer {
    public final Context mContext;
    public InitializationChecker mInitializationChecker;
    public DaggerSysUIGoogleGlobalRootComponent$SysUIGoogleGlobalRootComponentImpl mRootComponent;
    public DaggerSysUIGoogleGlobalRootComponent$SysUIGoogleSysUIComponentImpl mSysUIComponent;
    public DaggerSysUIGoogleGlobalRootComponent$WMComponentImpl mWMComponent;

    public SystemUIGoogleInitializer(Context context) {
        this.mContext = context;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v52, types: [com.android.wm.shell.sysui.ShellInterface, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r8v6, types: [com.android.wm.shell.shared.ShellTransitions, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r9v6, types: [com.android.wm.shell.keyguard.KeyguardTransitions, java.lang.Object] */
    public final void init() {
        Optional optional;
        Optional optional2;
        Optional optional3;
        SystemUIInitializer$2 systemUIInitializer$2;
        SystemUIInitializer$1 systemUIInitializer$1;
        Optional optional4;
        Optional optional5;
        Optional optional6;
        Optional optional7;
        SystemUIInitializer$3 systemUIInitializer$3;
        Optional optional8;
        Optional optional9;
        Optional optional10;
        Context context = this.mContext;
        context.getClass();
        Boolean bool = Boolean.FALSE;
        this.mRootComponent = new DaggerSysUIGoogleGlobalRootComponent$SysUIGoogleGlobalRootComponentImpl(new GlobalModule(), new AndroidInternalsModule(), new FrameworkServicesModule(), new GlobalCoroutinesModule(), new UnfoldTransitionModule(), new UnfoldSharedModule(), new UnfoldSharedInternalModule(), new UnfoldRotationProviderInternalModule(), new HingeAngleProviderInternalModule(), new FoldStateProviderModule(), context, bool);
        InitializationChecker initializationChecker = new InitializationChecker(bool.booleanValue());
        this.mInitializationChecker = initializationChecker;
        boolean initializeComponents = initializationChecker.initializeComponents();
        Context context2 = this.mContext;
        DaggerSysUIGoogleGlobalRootComponent$SysUIGoogleGlobalRootComponentImpl daggerSysUIGoogleGlobalRootComponent$SysUIGoogleGlobalRootComponentImpl = this.mRootComponent.sysUIGoogleGlobalRootComponentImpl;
        final DaggerSysUIGoogleGlobalRootComponent$WMComponentBuilder daggerSysUIGoogleGlobalRootComponent$WMComponentBuilder = new DaggerSysUIGoogleGlobalRootComponent$WMComponentBuilder(daggerSysUIGoogleGlobalRootComponent$SysUIGoogleGlobalRootComponentImpl);
        if (this.mInitializationChecker.initializeComponents() && context2.getResources().getBoolean(R.bool.config_enableShellMainThread)) {
            final HandlerThread handlerThread = new HandlerThread("wmshell.main", -4);
            handlerThread.start();
            if (!Handler.createAsync(handlerThread.getLooper()).runWithScissors(new Runnable() { // from class: com.android.systemui.SystemUIInitializer$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    SystemUIGoogleInitializer systemUIGoogleInitializer = SystemUIGoogleInitializer.this;
                    DaggerSysUIGoogleGlobalRootComponent$WMComponentBuilder daggerSysUIGoogleGlobalRootComponent$WMComponentBuilder2 = daggerSysUIGoogleGlobalRootComponent$WMComponentBuilder;
                    HandlerThread handlerThread2 = handlerThread;
                    systemUIGoogleInitializer.getClass();
                    daggerSysUIGoogleGlobalRootComponent$WMComponentBuilder2.setShellMainThread = handlerThread2;
                    systemUIGoogleInitializer.mWMComponent = new DaggerSysUIGoogleGlobalRootComponent$WMComponentImpl((DaggerSysUIGoogleGlobalRootComponent$SysUIGoogleGlobalRootComponentImpl) daggerSysUIGoogleGlobalRootComponent$WMComponentBuilder2.sysUIGoogleGlobalRootComponentImpl, new WMShellCoroutinesModule(), handlerThread2);
                }
            }, 5000L)) {
                Log.w("SystemUIFactory", "Failed to initialize WMComponent");
                throw new RuntimeException();
            }
        } else {
            this.mWMComponent = new DaggerSysUIGoogleGlobalRootComponent$WMComponentImpl(daggerSysUIGoogleGlobalRootComponent$SysUIGoogleGlobalRootComponentImpl, new WMShellCoroutinesModule(), (HandlerThread) daggerSysUIGoogleGlobalRootComponent$WMComponentBuilder.setShellMainThread);
        }
        DaggerSysUIGoogleGlobalRootComponent$SysUIGoogleGlobalRootComponentImpl daggerSysUIGoogleGlobalRootComponent$SysUIGoogleGlobalRootComponentImpl2 = this.mRootComponent.sysUIGoogleGlobalRootComponentImpl;
        if (initializeComponents) {
            ?? r1 = (ShellInterface) this.mWMComponent.provideShellSysuiCallbacksProvider.get();
            r1.getClass();
            Optional optional11 = (Optional) this.mWMComponent.providePipProvider.get();
            optional11.getClass();
            Optional optional12 = (Optional) this.mWMComponent.provideSplitScreenProvider.get();
            optional12.getClass();
            Optional optional13 = (Optional) this.mWMComponent.provideOneHandedProvider.get();
            optional13.getClass();
            Optional optional14 = (Optional) this.mWMComponent.provideBubblesProvider.get();
            optional14.getClass();
            Optional optional15 = (Optional) this.mWMComponent.provideTaskViewFactoryProvider.get();
            optional15.getClass();
            ?? r8 = (ShellTransitions) this.mWMComponent.provideRemoteTransitionsProvider.get();
            r8.getClass();
            ?? r9 = (KeyguardTransitions) this.mWMComponent.provideKeyguardTransitionsProvider.get();
            r9.getClass();
            Optional optional16 = (Optional) this.mWMComponent.provideStartingSurfaceProvider.get();
            optional16.getClass();
            Optional optional17 = (Optional) this.mWMComponent.provideDisplayAreaHelperProvider.get();
            optional17.getClass();
            Optional optional18 = (Optional) this.mWMComponent.provideRecentTasksProvider.get();
            optional18.getClass();
            Optional optional19 = (Optional) this.mWMComponent.provideBackAnimationProvider.get();
            optional19.getClass();
            Optional optional20 = (Optional) this.mWMComponent.provideDesktopModeProvider.get();
            optional20.getClass();
            ((ShellInterface) this.mWMComponent.provideShellSysuiCallbacksProvider.get()).onInit();
            optional2 = optional14;
            optional3 = optional15;
            systemUIInitializer$2 = r8;
            systemUIInitializer$1 = r9;
            optional5 = optional16;
            optional4 = optional17;
            optional6 = optional18;
            optional7 = optional19;
            optional = optional20;
            systemUIInitializer$3 = r1;
            optional8 = optional11;
            optional9 = optional12;
            optional10 = optional13;
        } else {
            SystemUIInitializer$3 systemUIInitializer$32 = new SystemUIInitializer$3();
            Optional ofNullable = Optional.ofNullable(null);
            ofNullable.getClass();
            Optional ofNullable2 = Optional.ofNullable(null);
            ofNullable2.getClass();
            Optional ofNullable3 = Optional.ofNullable(null);
            ofNullable3.getClass();
            Optional ofNullable4 = Optional.ofNullable(null);
            ofNullable4.getClass();
            Optional ofNullable5 = Optional.ofNullable(null);
            ofNullable5.getClass();
            SystemUIInitializer$2 systemUIInitializer$22 = new SystemUIInitializer$2();
            SystemUIInitializer$1 systemUIInitializer$12 = new SystemUIInitializer$1();
            Optional ofNullable6 = Optional.ofNullable(null);
            ofNullable6.getClass();
            Optional ofNullable7 = Optional.ofNullable(null);
            ofNullable7.getClass();
            Optional ofNullable8 = Optional.ofNullable(null);
            ofNullable8.getClass();
            Optional ofNullable9 = Optional.ofNullable(null);
            ofNullable9.getClass();
            Optional ofNullable10 = Optional.ofNullable(null);
            ofNullable10.getClass();
            optional = ofNullable10;
            optional2 = ofNullable4;
            optional3 = ofNullable5;
            systemUIInitializer$2 = systemUIInitializer$22;
            systemUIInitializer$1 = systemUIInitializer$12;
            optional4 = ofNullable6;
            optional5 = ofNullable7;
            optional6 = ofNullable8;
            optional7 = ofNullable9;
            systemUIInitializer$3 = systemUIInitializer$32;
            optional8 = ofNullable;
            optional9 = ofNullable2;
            optional10 = ofNullable3;
        }
        DaggerSysUIGoogleGlobalRootComponent$SysUIGoogleSysUIComponentImpl daggerSysUIGoogleGlobalRootComponent$SysUIGoogleSysUIComponentImpl = new DaggerSysUIGoogleGlobalRootComponent$SysUIGoogleSysUIComponentImpl(daggerSysUIGoogleGlobalRootComponent$SysUIGoogleGlobalRootComponentImpl2, new LeakModule(), new SharedLibraryModule(), new MediaProjectionDevicePolicyModule(), new SysUICoroutinesModule(), new GoogleDefaultBlueprintModule(), new SysUIUnfoldModule(), systemUIInitializer$3, optional8, optional9, optional10, optional2, optional3, systemUIInitializer$2, systemUIInitializer$1, optional5, optional4, optional6, optional7, optional);
        this.mSysUIComponent = daggerSysUIGoogleGlobalRootComponent$SysUIGoogleSysUIComponentImpl;
        Dependency dependency = (Dependency) daggerSysUIGoogleGlobalRootComponent$SysUIGoogleSysUIComponentImpl.dependencyProvider.get();
        ArrayMap arrayMap = dependency.mProviders;
        Dependency.DependencyKey dependencyKey = Dependency.TIME_TICK_HANDLER;
        Lazy lazy = dependency.mTimeTickHandler;
        Objects.requireNonNull(lazy);
        arrayMap.put(dependencyKey, new Dependency$$ExternalSyntheticLambda0(lazy));
        ArrayMap arrayMap2 = dependency.mProviders;
        Dependency.DependencyKey dependencyKey2 = Dependency.BG_LOOPER;
        Lazy lazy2 = dependency.mBgLooper;
        Objects.requireNonNull(lazy2);
        arrayMap2.put(dependencyKey2, new Dependency$$ExternalSyntheticLambda0(lazy2));
        ArrayMap arrayMap3 = dependency.mProviders;
        Lazy lazy3 = dependency.mBroadcastDispatcher;
        Objects.requireNonNull(lazy3);
        arrayMap3.put(BroadcastDispatcher.class, new Dependency$$ExternalSyntheticLambda0(lazy3));
        ArrayMap arrayMap4 = dependency.mProviders;
        Lazy lazy4 = dependency.mBluetoothController;
        Objects.requireNonNull(lazy4);
        arrayMap4.put(BluetoothControllerImpl.class, new Dependency$$ExternalSyntheticLambda0(lazy4));
        ArrayMap arrayMap5 = dependency.mProviders;
        Lazy lazy5 = dependency.mKeyguardUpdateMonitor;
        Objects.requireNonNull(lazy5);
        arrayMap5.put(KeyguardUpdateMonitor.class, new Dependency$$ExternalSyntheticLambda0(lazy5));
        ArrayMap arrayMap6 = dependency.mProviders;
        Lazy lazy6 = dependency.mDeviceProvisionedController;
        Objects.requireNonNull(lazy6);
        arrayMap6.put(DeviceProvisionedController.class, new Dependency$$ExternalSyntheticLambda0(lazy6));
        ArrayMap arrayMap7 = dependency.mProviders;
        Lazy lazy7 = dependency.mPluginManager;
        Objects.requireNonNull(lazy7);
        arrayMap7.put(PluginManager.class, new Dependency$$ExternalSyntheticLambda0(lazy7));
        ArrayMap arrayMap8 = dependency.mProviders;
        Lazy lazy8 = dependency.mAssistManager;
        Objects.requireNonNull(lazy8);
        arrayMap8.put(AssistManagerGoogle.class, new Dependency$$ExternalSyntheticLambda0(lazy8));
        ArrayMap arrayMap9 = dependency.mProviders;
        Lazy lazy9 = dependency.mTunerService;
        Objects.requireNonNull(lazy9);
        arrayMap9.put(TunerService.class, new Dependency$$ExternalSyntheticLambda0(lazy9));
        ArrayMap arrayMap10 = dependency.mProviders;
        Lazy lazy10 = dependency.mDarkIconDispatcher;
        Objects.requireNonNull(lazy10);
        arrayMap10.put(DarkIconDispatcher.class, new Dependency$$ExternalSyntheticLambda0(lazy10));
        ArrayMap arrayMap11 = dependency.mProviders;
        Lazy lazy11 = dependency.mFragmentService;
        Objects.requireNonNull(lazy11);
        arrayMap11.put(FragmentService.class, new Dependency$$ExternalSyntheticLambda0(lazy11));
        ArrayMap arrayMap12 = dependency.mProviders;
        Lazy lazy12 = dependency.mVolumeDialogController;
        Objects.requireNonNull(lazy12);
        arrayMap12.put(VolumeDialogController.class, new Dependency$$ExternalSyntheticLambda0(lazy12));
        ArrayMap arrayMap13 = dependency.mProviders;
        Lazy lazy13 = dependency.mMetricsLogger;
        Objects.requireNonNull(lazy13);
        arrayMap13.put(MetricsLogger.class, new Dependency$$ExternalSyntheticLambda0(lazy13));
        ArrayMap arrayMap14 = dependency.mProviders;
        Lazy lazy14 = dependency.mUiOffloadThread;
        Objects.requireNonNull(lazy14);
        arrayMap14.put(UiOffloadThread.class, new Dependency$$ExternalSyntheticLambda0(lazy14));
        ArrayMap arrayMap15 = dependency.mProviders;
        Lazy lazy15 = dependency.mLightBarController;
        Objects.requireNonNull(lazy15);
        arrayMap15.put(LightBarController.class, new Dependency$$ExternalSyntheticLambda0(lazy15));
        ArrayMap arrayMap16 = dependency.mProviders;
        Lazy lazy16 = dependency.mOverviewProxyService;
        Objects.requireNonNull(lazy16);
        arrayMap16.put(OverviewProxyService.class, new Dependency$$ExternalSyntheticLambda0(lazy16));
        ArrayMap arrayMap17 = dependency.mProviders;
        Lazy lazy17 = dependency.mNavBarModeController;
        Objects.requireNonNull(lazy17);
        arrayMap17.put(NavigationModeController.class, new Dependency$$ExternalSyntheticLambda0(lazy17));
        ArrayMap arrayMap18 = dependency.mProviders;
        Lazy lazy18 = dependency.mNavigationBarController;
        Objects.requireNonNull(lazy18);
        arrayMap18.put(NavigationBarControllerImpl.class, new Dependency$$ExternalSyntheticLambda0(lazy18));
        ArrayMap arrayMap19 = dependency.mProviders;
        Lazy lazy19 = dependency.mStatusBarStateController;
        Objects.requireNonNull(lazy19);
        arrayMap19.put(StatusBarStateController.class, new Dependency$$ExternalSyntheticLambda0(lazy19));
        ArrayMap arrayMap20 = dependency.mProviders;
        Lazy lazy20 = dependency.mNotificationMediaManager;
        Objects.requireNonNull(lazy20);
        arrayMap20.put(NotificationMediaManager.class, new Dependency$$ExternalSyntheticLambda0(lazy20));
        ArrayMap arrayMap21 = dependency.mProviders;
        Lazy lazy21 = dependency.mSysUiStateFlagsContainer;
        Objects.requireNonNull(lazy21);
        arrayMap21.put(SysUiState.class, new Dependency$$ExternalSyntheticLambda0(lazy21));
        ArrayMap arrayMap22 = dependency.mProviders;
        Lazy lazy22 = dependency.mCommandQueue;
        Objects.requireNonNull(lazy22);
        arrayMap22.put(CommandQueue.class, new Dependency$$ExternalSyntheticLambda0(lazy22));
        ArrayMap arrayMap23 = dependency.mProviders;
        Lazy lazy23 = dependency.mUiEventLogger;
        Objects.requireNonNull(lazy23);
        arrayMap23.put(UiEventLogger.class, new Dependency$$ExternalSyntheticLambda0(lazy23));
        ArrayMap arrayMap24 = dependency.mProviders;
        Lazy lazy24 = dependency.mFeatureFlagsLazy;
        Objects.requireNonNull(lazy24);
        arrayMap24.put(FeatureFlags.class, new Dependency$$ExternalSyntheticLambda0(lazy24));
        ArrayMap arrayMap25 = dependency.mProviders;
        Lazy lazy25 = dependency.mNotificationSectionsManagerLazy;
        Objects.requireNonNull(lazy25);
        arrayMap25.put(NotificationSectionsManager.class, new Dependency$$ExternalSyntheticLambda0(lazy25));
        ArrayMap arrayMap26 = dependency.mProviders;
        Lazy lazy26 = dependency.mScreenOffAnimationController;
        Objects.requireNonNull(lazy26);
        arrayMap26.put(ScreenOffAnimationController.class, new Dependency$$ExternalSyntheticLambda0(lazy26));
        ArrayMap arrayMap27 = dependency.mProviders;
        Lazy lazy27 = dependency.mAmbientStateLazy;
        Objects.requireNonNull(lazy27);
        arrayMap27.put(AmbientState.class, new Dependency$$ExternalSyntheticLambda0(lazy27));
        ArrayMap arrayMap28 = dependency.mProviders;
        Lazy lazy28 = dependency.mGroupMembershipManagerLazy;
        Objects.requireNonNull(lazy28);
        arrayMap28.put(GroupMembershipManagerImpl.class, new Dependency$$ExternalSyntheticLambda0(lazy28));
        ArrayMap arrayMap29 = dependency.mProviders;
        Lazy lazy29 = dependency.mGroupExpansionManagerLazy;
        Objects.requireNonNull(lazy29);
        arrayMap29.put(GroupExpansionManagerImpl.class, new Dependency$$ExternalSyntheticLambda0(lazy29));
        ArrayMap arrayMap30 = dependency.mProviders;
        Lazy lazy30 = dependency.mSystemUIDialogManagerLazy;
        Objects.requireNonNull(lazy30);
        arrayMap30.put(SystemUIDialogManager.class, new Dependency$$ExternalSyntheticLambda0(lazy30));
        ArrayMap arrayMap31 = dependency.mProviders;
        Lazy lazy31 = dependency.mDialogTransitionAnimatorLazy;
        Objects.requireNonNull(lazy31);
        arrayMap31.put(DialogTransitionAnimator.class, new Dependency$$ExternalSyntheticLambda0(lazy31));
        ArrayMap arrayMap32 = dependency.mProviders;
        Lazy lazy32 = dependency.mUserTrackerLazy;
        Objects.requireNonNull(lazy32);
        arrayMap32.put(UserTracker.class, new Dependency$$ExternalSyntheticLambda0(lazy32));
        ArrayMap arrayMap33 = dependency.mProviders;
        Lazy lazy33 = dependency.mStatusBarWindowControllerLazy;
        Objects.requireNonNull(lazy33);
        arrayMap33.put(StatusBarWindowControllerImpl.class, new Dependency$$ExternalSyntheticLambda0(lazy33));
        Dependency.setInstance(dependency);
    }
}
